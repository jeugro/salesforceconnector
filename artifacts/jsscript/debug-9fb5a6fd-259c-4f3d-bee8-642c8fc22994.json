{
	"id": "9fb5a6fd-259c-4f3d-bee8-642c8fc22994",
	"createdAt": "2022-10-30T16:46:19.000Z",
	"createdBy": "ole-andre.haugen@neptune-software.com",
	"globalScripts": [],
	"externalModules": [],
	"entitySets": [],
	"apis": [],
	"name": "debug",
	"ver": "22.10.30.1746",
	"description": null,
	"content": [
		"==OBJECT STRING==",
		"let runMode = ((req.body._keyField) ? \"Form\" : \"List\");\r",
		"\r",
		"let counter = 0;\r",
		"let pagination = \"\";\r",
		"let queryData = \"\";\r",
		"let order = \"\";\r",
		"let where = \"\";\r",
		"let whereSep = \"\";\r",
		"let fields = \"\";\r",
		"let sep = \"\";\r",
		"\r",
		"\r",
		"result.data = {\r",
		"    result: [],\r",
		"    count: 0\r",
		"}\r",
		"\r",
		"try {\r",
		"\r",
		"    const connector = await entities.p9_sf_connector.findOne({\r",
		"        select: [\"table\", \"metadata\"],\r",
		"        where: {\r",
		"            id: req.body._connector.settings.startParam\r",
		"        }\r",
		"    });\r",
		"\r",
		"    if (!connector) return complete();\r",
		"\r",
		"    //  Fields Selection \r",
		"    if (runMode == \"Form\") {\r",
		"\r",
		"        if (req.body._settings.fieldsSel) {\r",
		"\r",
		"            req.body._settings.fieldsSel.forEach(function (field) {\r",
		"\r",
		"                // const fieldMeta = connector.metadata.fields.find((f) => f.name === field.name);\r",
		"\r",
		"                // if (fieldMeta) {\r",
		"                if (field.name.indexOf(\"_l_\") > -1) {\r",
		"                    fields += sep + field.name.split(\"_l_\").join(\".\");\r",
		"                } else {\r",
		"                    fields += sep + field.name;\r",
		"                }\r",
		"                sep = \",\";\r",
		"                // if (fieldMeta.relationshipName && fieldMeta.lookupField) fields += sep + fieldMeta.relationshipName + \".\" + fieldMeta.lookupField;\r",
		"                // }\r",
		"\r",
		"            });\r",
		"\r",
		"        }\r",
		"\r",
		"        // Where \r",
		"        req.body._keyField.forEach(function (keyField) {\r",
		"            where += whereSep + keyField.fieldName + \" = '\" + req.body[keyField.fieldName] + \"'\";\r",
		"            whereSep = \" AND \";\r",
		"        });\r",
		"\r",
		"    } else {\r",
		"\r",
		"        if (req.body._settings.fieldsRun) {\r",
		"\r",
		"            req.body._settings.fieldsRun.forEach(function (field) {\r",
		"\r",
		"                // const fieldMeta = connector.metadata.fields.find((f) => f.name === field.name);\r",
		"\r",
		"                // if (fieldMeta) {\r",
		"                if (field.name.indexOf(\"_l_\") > -1) {\r",
		"                    fields += sep + field.name.split(\"_l_\").join(\".\");\r",
		"                } else {\r",
		"                    fields += sep + field.name;\r",
		"                }\r",
		"                sep = \",\";\r",
		"                // if (fieldMeta.relationshipName && fieldMeta.lookupField) fields += sep + fieldMeta.relationshipName + \".\" + fieldMeta.lookupField;\r",
		"                // }\r",
		"\r",
		"            });\r",
		"\r",
		"        }\r",
		"\r",
		"        // Where \r",
		"        const bodyFields = Object.keys(req.body);\r",
		"\r",
		"        bodyFields.forEach(function (fieldName) {\r",
		"\r",
		"            if (fieldName.substr(0, 1) !== \"_\") {\r",
		"\r",
		"                const fieldValue = req.body[fieldName];\r",
		"                if (!fieldValue) return;\r",
		"\r",
		"                const fieldSel = req.body._settings.fieldsSel.find((f) => f.name === fieldName);\r",
		"                if (!fieldSel) return;\r",
		"\r",
		"                const fieldMeta = connector.metadata.fields.find((f) => f.name === fieldName);\r",
		"                if (!fieldMeta) return;\r",
		"\r",
		"                switch (fieldSel.type) {\r",
		"\r",
		"                    case \"CheckBox\":\r",
		"                    case \"Switch\":\r",
		"                        where += whereSep + \" \" + fieldName + \" = \" + fieldValue;\r",
		"                        break;\r",
		"\r",
		"                    case \"DateRange\":\r",
		"                        where += whereSep + \" \" + fieldName + \" >= \" + fieldValue;\r",
		"                        where += whereSep + \" \" + fieldName + \" <= \" + req.body[fieldName + \"_end\"];\r",
		"                        break;\r",
		"\r",
		"                    case \"SingleSelect\":\r",
		"                    case \"SingleSelectLookup\":\r",
		"                    case \"SingleSelectScript\":\r",
		"                        if (fieldMeta.type === \"datetime\") {\r",
		"                            where += whereSep + \" \" + fieldName + \" = \" + fieldValue;\r",
		"                        } else {\r",
		"                            where += whereSep + \" \" + fieldName + \" = '\" + fieldValue + \"'\";\r",
		"                        }\r",
		"                        break;\r",
		"\r",
		"                    case \"MultiSelect\":\r",
		"                    case \"MultiSelectLookup\":\r",
		"                    case \"MultiSelectScript\":\r",
		"                        let includes = \"\";\r",
		"                        let sep = \"\";\r",
		"\r",
		"                        fieldValue.forEach(function (value, index, array) {\r",
		"                            includes += sep + \"'\" + value + \"'\";\r",
		"                            sep = \",\";\r",
		"                        });\r",
		"\r",
		"                        where += whereSep + \" \" + fieldName + \" IN (\" + includes + \")\";\r",
		"                        break;\r",
		"\r",
		"                    default:\r",
		"                        if (fieldMeta.type === \"id\" || fieldMeta.type === \"reference\") {\r",
		"                            where += whereSep + \" \" + fieldName + \" = '\" + fieldValue + \"'\";\r",
		"                        } else if (fieldMeta.type === \"boolean\") {\r",
		"                            where += whereSep + \" \" + fieldName + \" = \" + fieldValue;\r",
		"                        } else {\r",
		"                            where += whereSep + \" \" + fieldName + \" LIKE '%\" + fieldValue + \"%'\";\r",
		"                        }\r",
		"                        break;\r",
		"\r",
		"                }\r",
		"\r",
		"                whereSep = \" AND \";\r",
		"\r",
		"            }\r",
		"\r",
		"        });\r",
		"\r",
		"    }\r",
		"\r",
		"    // Order\r",
		"    if (req.body._order) {\r",
		"\r",
		"        const orderField = Object.keys(req.body._order)[0];\r",
		"\r",
		"        if (orderField) {\r",
		"            const orderType = req.body._order[orderField];\r",
		"            order += \" ORDER BY \" + orderField + \" \" + orderType;\r",
		"        }\r",
		"\r",
		"    }\r",
		"\r",
		"    // Pagination\r",
		"    if (req.body._pagination) {\r",
		"\r",
		"        let queryCount = \"SELECT count() FROM \" + connector.table;\r",
		"        if (where) queryCount += \" WHERE \" + where;\r",
		"\r",
		"        const responseCount = await apis.query({ parameters: { \"q\": queryCount } });\r",
		"        if (responseCount && responseCount.data && responseCount.data.totalSize) counter = responseCount.data.totalSize;\r",
		"\r",
		"        pagination += \" LIMIT \" + req.body._pagination.take;\r",
		"        pagination += \" OFFSET \" + req.body._pagination.skip;\r",
		"\r",
		"    }\r",
		"\r",
		"    // Start Query API\r",
		"    queryData = \"SELECT \" + fields + \" FROM \" + connector.table;\r",
		"\r",
		"    if (where) queryData += \" WHERE \" + where;\r",
		"    if (order) queryData += order;\r",
		"    if (pagination) queryData += pagination;\r",
		"\r",
		"    const responseRecords = await apis.query({ parameters: { \"q\": queryData } });\r",
		"\r",
		"\r",
		"    // Merge LookupFields from SalesForce\r",
		"    if (responseRecords && responseRecords.data && responseRecords.data.records) {\r",
		"\r",
		"        responseRecords.data.records.forEach(function (row) {\r",
		"\r",
		"            req.body._settings.fieldsRun.forEach(function (field) {\r",
		"                if (field.name.indexOf(\"_l_\") > -1) {\r",
		"                    const lookupData = field.name.split(\"_l_\");\r",
		"                    row[field.name] = row[lookupData[0]][lookupData[1]];\r",
		"                }\r",
		"            });\r",
		"\r",
		"            // let rowFields = Object.keys(row);\r",
		"\r",
		"            // Populate Data\r",
		"            // rowFields.forEach(function (fieldName) {\r",
		"            // \r",
		"            // if (fieldName.indexOf(\"_l_\") > -1) {\r",
		"            //     const lookupData = fieldName.split(\"_l_\");\r",
		"            //     row[fieldName] = row[lookupData[0]][lookupData[1]];\r",
		"            // }\r",
		"\r",
		"            // const fieldMeta = connector.metadata.fields.find((f) => f.name === fieldName);\r",
		"\r",
		"\r",
		"\r",
		"            // if (fieldMeta && fieldMeta.relationshipName && fieldMeta.lookupField && row[fieldMeta.relationshipName]) {\r",
		"            //     row[fieldName] = row[fieldMeta.relationshipName][fieldMeta.lookupField];\r",
		"            // }\r",
		"            // });\r",
		"\r",
		"            // Cleanup Data\r",
		"            // rowFields.forEach(function (fieldName) {\r",
		"            //     const fieldMeta = connector.metadata.fields.find((f) => f.name === fieldName);\r",
		"            //     if (fieldMeta && fieldMeta.relationshipName && fieldMeta.lookupField) delete row[fieldMeta.relationshipName];\r",
		"            //     delete row[\"attributes\"];\r",
		"            // });\r",
		"\r",
		"            rowFields = Object.keys(row);\r",
		"\r",
		"            // Adaptive Framework Binding \r",
		"            rowFields.forEach(function (fieldName) {\r",
		"\r",
		"                const fieldRun = req.body._settings.fieldsRun.find((f) => f.name === fieldName);\r",
		"\r",
		"                if (fieldRun) {\r",
		"\r",
		"                    switch (fieldRun.type) {\r",
		"\r",
		"                        case \"ObjectStatus\":\r",
		"\r",
		"                            // Unit\r",
		"                            if (fieldRun.statusUnitType === \"Binding\") row[fieldName + \"_unit\"] = row[fieldRun.statusUnitBinding];\r",
		"                            if (fieldRun.statusUnitType === \"Fixed\") row[fieldName + \"_unit\"] = fieldRun.statusUnitFixed;\r",
		"\r",
		"                            // State\r",
		"                            if (fieldRun.statusStateType === \"Binding\") row[fieldName + \"_state\"] = row[fieldRun.statusStateBinding];\r",
		"                            if (fieldRun.statusStateType === \"Fixed\") row[fieldName + \"_state\"] = fieldRun.statusStateFixed;\r",
		"\r",
		"                            // Icon\r",
		"                            if (fieldRun.statusIconType === \"Binding\") row[fieldName + \"_icon\"] = row[fieldRun.statusIconBinding];\r",
		"                            if (fieldRun.statusIconType === \"Fixed\") row[fieldName + \"_icon\"] = fieldRun.statusIconFixed;\r",
		"\r",
		"                            // Title\r",
		"                            if (fieldRun.statusTitleType === \"Binding\") row[fieldName + \"_title\"] = row[fieldRun.statusTitleBinding];\r",
		"                            if (fieldRun.statusTitleType === \"Fixed\") row[fieldName + \"_title\"] = fieldRun.statusTitleFixed;\r",
		"\r",
		"                            break;\r",
		"\r",
		"                        case \"ObjectNumber\":\r",
		"\r",
		"                            // Unit\r",
		"                            if (fieldRun.numberUnitType === \"Binding\") row[fieldName + \"_unit\"] = row[fieldRun.numberUnitBinding];\r",
		"                            if (fieldRun.numberUnitType === \"Fixed\") row[fieldName + \"_unit\"] = fieldRun.numberUnitFixed;\r",
		"\r",
		"                            // State\r",
		"                            if (fieldRun.numberStateType === \"Binding\") row[fieldName + \"_state\"] = row[fieldRun.numberStateBinding];\r",
		"                            if (fieldRun.numberStateType === \"Fixed\") row[fieldName + \"_state\"] = fieldRun.numberStateFixed;\r",
		"\r",
		"                            break;\r",
		"\r",
		"                        default:\r",
		"                            break;\r",
		"                    }\r",
		"                }\r",
		"            });\r",
		"\r",
		"\r",
		"        });\r",
		"\r",
		"    }\r",
		"\r",
		"    // Send Response to Client\r",
		"    if (runMode == \"Form\") {\r",
		"\r",
		"        result.data = responseRecords.data.records;\r",
		"\r",
		"    } else {\r",
		"\r",
		"        if (!req.body._pagination) counter = responseRecords.data.records.length;\r",
		"\r",
		"        result.data = {\r",
		"            result: responseRecords.data.records || [],\r",
		"            count: counter,\r",
		"            debug: queryData,\r",
		"            settings: req.body._settings\r",
		"        }\r",
		"\r",
		"    }\r",
		"\r",
		"    complete();\r",
		"\r",
		"} catch (e) {\r",
		"\r",
		"    result.data = {\r",
		"        status: \"ERROR\",\r",
		"        message: e,\r",
		"        debug: queryData,\r",
		"        settings: req.body._settings\r",
		"    }\r",
		"\r",
		"    complete();\r",
		"\r",
		"}\r",
		"\r",
		"\r",
		""
	],
	"useAsGlobalScript": false,
	"isTypescript": false,
	"transpiledContent": null,
	"lastRunSuccessful": false,
	"jsscriptGroup": "8724ce1d-db36-43cb-a923-3e0be5432b2a",
	"package": "ace216dd-a722-4e40-9d39-6049629fca12"
}